{"version":3,"sources":["components/questions/API.ts","components/questions/question-card.styles.ts","components/questions/question-card.components.tsx","App.styles.ts","images/ready.png","images/great.png","images/notbad.png","App.tsx","index.tsx"],"names":["fetchQuizQuestions","a","fetch","json","data","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNo","totalQuestions","className","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","setUserAnswer","score","setScore","quizOver","setQuizOver","startQuiz","newQuestions","src","readyImage","undefined","e","currentTarget","prev","answerObject","length","TOTAL_QUESTIONS","nextQ","greatImage","notbadImage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48757ae9.chunk.js","sourcesContent":["export type Question = {\n  question: string;\n  correct_answer: string;\n  incorrect_answers: string[];\n};\n\nexport type QuestionState = Question & { answers: string[] };\n\nconst shuffleArray = (array: any[]) =>\n  [...array].sort(() => Math.random() - 0.5);\n\nexport const fetchQuizQuestions = async (): Promise<QuestionState[]> => {\n  const endpoint = `https://s-quiz-api.herokuapp.com/quiz/`;\n  const data = await (await fetch(endpoint)).json();\n  return data.map((question: Question) => ({\n    ...question,\n    answers: shuffleArray([\n      ...question.incorrect_answers,\n      question.correct_answer,\n    ]),\n  }));\n};\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  background-color: #fef1e6;\n  width: 500px;\n  border: 1px solid #fff;\n  padding: 20px;\n  margin-top: 10px;\n  box-shadow: 0px 5px 5px lightgray;\n\n  p {\n    font-size: 1rem;\n  }\n\n  .question_number {\n    font-size: 14px;\n  }\n\n  .question {\n    font-weight: 600;\n    font-size: 20px;\n  }\n`;\n\ntype ButtonWrapperProps = {\n  correct: boolean;\n  userClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n  transition: all 0.3s ease;\n\n  :hover {\n    opacity: 0.8;\n  }\n\n  .answer_button {\n    cursor: pointer;\n    user-select: none;\n    width: 100%;\n    height: 30px;\n    margin: 20px 0 10px;\n    background: ${({ correct, userClicked }) =>\n      correct ? \"#FF7997\" : !correct && userClicked ? \"gray\" : \"#F3D5C0\"};\n    border: 1px solid #fff;\n    border-radius: 20px;\n    font-size: 16px;\n  }\n`;\n","import React from \"react\";\n\nimport { AnswerObject } from \"../../App\";\nimport { Wrapper, ButtonWrapper } from \"./question-card.styles\";\n\ntype Props = {\n  question: string;\n  answers: string[];\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: AnswerObject | undefined;\n  questionNo: number;\n  totalQuestions: number;\n};\n\nconst QuestionCard: React.FC<Props> = ({\n  question,\n  answers,\n  callback,\n  userAnswer,\n  questionNo,\n  totalQuestions,\n}) => (\n  <Wrapper>\n    <p className=\"question_number\">\n      Questions: {questionNo} / {totalQuestions}\n    </p>\n    <p className=\"question\">{question}</p>\n\n    <div>\n      {answers.map((answer) => (\n        <ButtonWrapper\n          key={answer}\n          correct={userAnswer?.correctAnswer === answer}\n          userClicked={userAnswer?.answer === answer}\n        >\n          <div key={answer}></div>\n          <button\n            className=\"answer_button\"\n            disabled={userAnswer ? true : false} // or !!userAnswer\n            value={answer}\n            onClick={callback}\n          >\n            {/* <span dangerouslySetInnerHTML={{ __html: answer }} /> */}\n            <span>{answer}</span>\n          </button>\n        </ButtonWrapper>\n      ))}\n    </div>\n  </Wrapper>\n);\n\nexport default QuestionCard;\n","import styled, { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n  html {\n      height: 100%;\n  }\n\n  * {\n      box-sizing: border-box;\n      font-family: \"Noto Sans\", sans-serif;\n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;\n  }\n\n  body {\n      margin: 0;\n      padding: 0;\n      text-align: center;\n      background-image: linear-gradient( 179.4deg,  rgba(253,240,233,1) 2.2%, rgba(255,194,203,1) 96.2% );\n\n\n  .image_container {\n    margin: 10px;\n    display: grid;\n    // grid-template-rows: 3fr 1fr;\n  }\n\n  .ready_image {\n    width: 580px;\n  }\n\n  .start_btn,\n  .next_btn {\n    height: 80px;\n    width: 80px;\n    margin: 40px;\n    font-weight: 600;\n    font-size: 16px;\n    justify-self: center;\n    border: 1px solid #FF7997;\n    border-radius: 50%;\n    color: #FF7997;\n    background-color: #FDE5E1;\n    box-shadow: 5px 3px #FF7997;\n  }\n\n  .start_btn:hover,\n  .next_btn:hover {\n    background-color: #F0D9FF;\n  }\n\n  .result_container {\n    margin-top: 30px;\n    display: grid;\n    grid-template-rows: 0.2fr 1fr 0.2fr;\n  }\n\n  .result_image {\n    width: 300px;\n  }\n\n\n  \n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  .title_1 {\n    margin: 60px 10px 10px;\n    font-size: 46px;\n    // color: #fe8f8f;\n    font-weight: 700;\n    background-image: radial-gradient(\n      circle 685.3px at 47.8% 55.1%,\n      rgba(255, 99, 152, 1) 0%,\n      rgba(251, 213, 149, 1) 90.1%\n    );\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n  }\n\n  .title_2 {\n    color: gray;\n    margin: 10px 0 40px;\n    font-weight: 500;\n  }\n\n  .span_main {\n    color: black;\n    background-color: #fed6d8;\n  }\n\n  .score {\n    color: red;\n  }\n`;\n","export default __webpack_public_path__ + \"static/media/ready.cd3478ed.png\";","export default __webpack_public_path__ + \"static/media/great.210d2e40.png\";","export default __webpack_public_path__ + \"static/media/notbad.2a98fd43.png\";","import React, { useState, Fragment } from \"react\";\nimport { fetchQuizQuestions, QuestionState } from \"./components/questions/API\";\n\nimport QuestionCard from \"./components/questions/question-card.components\";\nimport { GlobalStyle, Wrapper } from \"./App.styles\";\n\n//images\nimport readyImage from \"./images/ready.png\";\nimport greatImage from \"./images/great.png\";\nimport notbadImage from \"./images/notbad.png\";\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 5;\n\nconst App: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswer, setUserAnswer] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [quizOver, setQuizOver] = useState(true);\n\n  const startQuiz = async () => {\n    setLoading(true);\n    setQuizOver(false);\n\n    const newQuestions = await fetchQuizQuestions();\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswer([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: any) => {\n    if (!quizOver) {\n      // User answer\n      const answer = e.currentTarget.value;\n      // Check if the answer is correct\n      const correct = questions[number].correct_answer === answer;\n      // Add score\n      if (correct) setScore((prev) => prev + 1);\n      // Save answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswer((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    const nextQ = number + 1;\n\n    if (nextQ === TOTAL_QUESTIONS) {\n      setQuizOver(true);\n    } else {\n      setNumber(nextQ);\n    }\n  };\n\n  return (\n    <Fragment>\n      <GlobalStyle />\n      <Wrapper>\n        <h1 className=\"title_1\">You can work with Stella</h1>\n        <h3 className=\"title_2\">\n          Are you here because you want to work with her?\n          <br />\n          Play this <span className=\"span_main\">Get-to-Know-Her Quiz</span>{\" \"}\n          first :)\n        </h3>\n        {quizOver ? ( // main page\n          <div className=\"image_container\">\n            <img src={readyImage} className=\"ready_image\" />\n            <button className=\"start_btn\" onClick={startQuiz}>\n              START\n            </button>\n          </div>\n        ) : null}\n        {loading ? <p>Loading Questions... 💣</p> : null}\n\n        {!loading && !quizOver ? ( // quiz page\n          <QuestionCard\n            questionNo={number + 1} // question Number starts from 1\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswer ? userAnswer[number] : undefined}\n            callback={checkAnswer}\n          />\n        ) : null}\n\n        {!quizOver && // next quiz until the last page\n        !loading &&\n        userAnswer.length === number + 1 &&\n        number !== TOTAL_QUESTIONS - 1 ? (\n          <button className=\"next_btn\" onClick={nextQuestion}>\n            NEXT\n          </button>\n        ) : null}\n\n        {userAnswer.length === TOTAL_QUESTIONS ? ( // quiz ends? show score & images\n          <div className=\"result_container\">\n            <h2>\n              YOUR SCORE : <span className=\"score\">{score * 20} </span>{\" \"}\n            </h2>\n            {score * 20 > 50 ? (\n              <img src={greatImage} className=\"result_image\" />\n            ) : (\n              <img src={notbadImage} className=\"result_image\" />\n            )}\n\n            <button className=\"start_btn\" onClick={startQuiz}>\n              RESTART\n            </button>\n          </div>\n        ) : null}\n      </Wrapper>\n    </Fragment>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}